{
  "abbrev": {
    "description": "Like ruby's abbrev module, but in js",
    "scripts": {
      "test": "tap test.js --100",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --all; git push origin --tags"
    },
    "env": {},
    "args": {}
  },
  "array-flatten": {
    "description": "Flatten an array of nested arrays into a single flat array",
    "scripts": {
      "test": "istanbul cover _mocha -- -R spec"
    },
    "env": {},
    "args": {}
  },
  "anymatch": {
    "description": "Matches strings against configurable strings, globs, regular expressions, and/or functions",
    "scripts": {
      "test": "nyc mocha",
      "mocha": "mocha"
    },
    "env": {},
    "args": {}
  },
  "axios": {
    "description": "Promise based HTTP client for the browser and node.js",
    "scripts": {
      "test": "grunt test && dtslint",
      "start": "node ./sandbox/server.js",
      "build": "NODE_ENV=production grunt build",
      "preversion": "grunt version && npm test",
      "version": "npm run build && git add -A dist && git add CHANGELOG.md bower.json package.json",
      "postversion": "git push && git push --tags",
      "examples": "node ./examples/server.js",
      "coveralls": "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
      "fix": "eslint --fix lib/**/*.js"
    },
    "env": {},
    "args": {}
  },
  "balanced-match": {
    "description": "Match balanced character pairs, like \"{\" and \"}\"",
    "scripts": {
      "test": "tape test/test.js",
      "bench": "matcha test/bench.js"
    },
    "env": {},
    "args": {}
  },
  "body-parser": {
    "description": "Node.js body parsing middleware",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --require test/support/env --reporter spec --check-leaks --bail test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "asynckit": {
    "description": "Minimal async jobs utility library, with streams support",
    "scripts": {
      "clean": "rimraf coverage",
      "lint": "eslint *.js lib/*.js test/*.js",
      "test": "istanbul cover --reporter=json tape -- 'test/test-*.js' | tap-spec",
      "win-test": "tape test/test-*.js",
      "browser": "browserify -t browserify-istanbul test/lib/browserify_adjustment.js test/test-*.js | obake --coverage | tap-spec",
      "report": "istanbul report",
      "size": "browserify index.js | size-table asynckit",
      "debug": "tape test/test-*.js"
    },
    "env": {},
    "args": {}
  },
  "accepts": {
    "description": "Higher-level content negotiation",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --check-leaks --bail test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "brace-expansion": {
    "description": "Brace expansion as known from sh/bash",
    "scripts": {
      "test": "tape test/*.js",
      "gentest": "bash test/generate.sh",
      "bench": "matcha test/perf/bench.js"
    },
    "env": {},
    "args": {}
  },
  "binary-extensions": {
    "description": "List of binary file extensions",
    "scripts": {
      "test": "xo && ava && tsd"
    },
    "env": {},
    "args": {}
  },
  "braces": {
    "description": "Bash-like brace expansion, implemented in JavaScript. Safer than other brace expansion libs, with complete support for the Bash 4.3 braces specification, without sacrificing speed.",
    "scripts": {
      "test": "mocha",
      "benchmark": "node benchmark"
    },
    "env": {},
    "args": {}
  },
  "bytes": {
    "description": "Utility to parse a string bytes to bytes and vice-versa",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --check-leaks --reporter spec",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "call-bind": {
    "description": "Robustly `.call.bind()` a function",
    "scripts": {
      "prepublish": "safe-publish-latest",
      "lint": "eslint --ext=.js,.mjs .",
      "pretest": "npm run lint",
      "tests-only": "nyc tape 'test/*'",
      "test": "npm run tests-only",
      "posttest": "aud --production",
      "version": "auto-changelog && git add CHANGELOG.md",
      "postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
    },
    "env": {},
    "args": {}
  },
  "chokidar": {
    "description": "Minimal and efficient cross-platform file watching library",
    "scripts": {
      "dtslint": "dtslint types",
      "lint": "eslint --report-unused-disable-directives --ignore-path .gitignore .",
      "mocha": "mocha --exit --timeout 90000",
      "test": "npm run lint && npm run mocha"
    },
    "env": {},
    "args": {}
  },
  "combined-stream": {
    "description": "A stream that emits multiple other streams one after another.",
    "scripts": {
      "test": "node test/run.js"
    },
    "env": {},
    "args": {}
  },
  "concat-map": {
    "description": "concatenative mapdashery",
    "scripts": {
      "test": "tape test/*.js"
    },
    "env": {},
    "args": {}
  },
  "content-disposition": {
    "description": "Create and parse Content-Disposition header",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "cookie-signature": {
    "description": "Sign and unsign cookies",
    "scripts": {
      "test": "mocha --require should --reporter spec"
    },
    "env": {},
    "args": {}
  },
  "cors": {
    "description": "Node.js CORS middleware",
    "scripts": {
      "test": "npm run lint && nyc --reporter=html --reporter=text mocha --require test/support/env",
      "lint": "eslint lib test"
    },
    "env": {},
    "args": {}
  },
  "content-type": {
    "description": "Create and parse HTTP Content-Type header",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --check-leaks --bail test/",
      "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "debug": {
    "description": "small debugging utility",
    "scripts": {},
    "env": {},
    "args": {}
  },
  "cookie": {
    "description": "HTTP server cookie parsing and serialization",
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "update-bench": "node scripts/update-benchmark.js",
      "version": "node scripts/version-history.js && git add HISTORY.md"
    },
    "env": {},
    "args": {}
  },
  "delayed-stream": {
    "description": "Buffers events from a stream until you are ready to handle them.",
    "scripts": {
      "test": "make test"
    },
    "env": {},
    "args": {}
  },
  "dotenv": {
    "description": "Loads environment variables from .env file",
    "scripts": {
      "dts-check": "tsc --project tests/types/tsconfig.json",
      "lint": "standard",
      "lint-readme": "standard-markdown",
      "pretest": "npm run lint && npm run dts-check",
      "test": "tap tests/*.js --100 -Rspec",
      "prerelease": "npm test",
      "release": "standard-version"
    },
    "env": {},
    "args": {}
  },
  "depd": {
    "description": "Deprecate all the things",
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec --bail test/",
      "test-ci": "istanbul cover --print=none node_modules/mocha/bin/_mocha -- --reporter spec test/ && istanbul report lcovonly text-summary",
      "test-cov": "istanbul cover --print=none node_modules/mocha/bin/_mocha -- --reporter dot test/ && istanbul report lcov text-summary"
    },
    "env": {},
    "args": {}
  },
  "escape-html": {
    "description": "Escape string for use in HTML",
    "scripts": {
      "bench": "node benchmark/index.js"
    },
    "env": {},
    "args": {}
  },
  "express": {
    "description": "Fast, unopinionated, minimalist web framework",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --require test/support/env --reporter spec --bail --check-leaks test/ test/acceptance/",
      "test-ci": "nyc --reporter=lcovonly --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "test-tap": "mocha --require test/support/env --reporter tap --check-leaks test/ test/acceptance/"
    },
    "env": {},
    "args": {}
  },
  "destroy": {
    "description": "destroy a stream if possible",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec",
      "test-ci": "nyc --reporter=lcovonly --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "ee-first": {
    "description": "return the first event in a set of ee/event pairs",
    "scripts": {
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "encodeurl": {
    "description": "Encode a URL to a percent-encoded form, excluding already-encoded sequences",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "fill-range": {
    "description": "Fill in a range of numbers or letters, optionally passing an increment or `step` to use, or create a regex-compatible range with `options.toRegex`",
    "scripts": {
      "test": "mocha"
    },
    "env": {},
    "args": {}
  },
  "finalhandler": {
    "description": "Node.js final http responder",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcovonly --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "follow-redirects": {
    "description": "HTTP and HTTPS modules that follow redirects.",
    "scripts": {
      "test": "npm run lint && npm run mocha",
      "lint": "eslint *.js test",
      "mocha": "nyc mocha"
    },
    "env": {},
    "args": {}
  },
  "form-data": {
    "description": "A library to create readable \"multipart/form-data\" streams. Can be used to submit forms and file uploads to other web applications.",
    "scripts": {
      "pretest": "rimraf coverage test/tmp",
      "test": "istanbul cover test/run.js",
      "posttest": "istanbul report lcov text",
      "lint": "eslint lib/*.js test/*.js test/integration/*.js",
      "report": "istanbul report lcov text",
      "ci-lint": "is-node-modern 8 && npm run lint || is-node-not-modern 8",
      "ci-test": "npm run test && npm run browser && npm run report",
      "predebug": "rimraf coverage test/tmp",
      "debug": "verbose=1 ./test/run.js",
      "browser": "browserify -t browserify-istanbul test/run-browser.js | obake --coverage",
      "check": "istanbul check-coverage coverage/coverage*.json",
      "files": "pkgfiles --sort=name",
      "get-version": "node -e \"console.log(require('./package.json').version)\"",
      "update-readme": "sed -i.bak 's/\\/master\\.svg/\\/v'$(npm --silent run get-version)'.svg/g' README.md",
      "restore-readme": "mv README.md.bak README.md",
      "prepublish": "in-publish && npm run update-readme || not-in-publish",
      "postpublish": "npm run restore-readme"
    },
    "env": {},
    "args": {}
  },
  "forwarded": {
    "description": "Parse HTTP X-Forwarded-For header",
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "version": "node scripts/version-history.js && git add HISTORY.md"
    },
    "env": {},
    "args": {}
  },
  "get-intrinsic": {
    "description": "Get and robustly cache all JS language-level intrinsics at first require time",
    "scripts": {
      "prepack": "npmignore --auto --commentLines=autogenerated",
      "prepublish": "not-in-publish || npm run prepublishOnly",
      "prepublishOnly": "safe-publish-latest",
      "prelint": "evalmd README.md",
      "lint": "eslint --ext=.js,.mjs .",
      "pretest": "npm run lint",
      "tests-only": "nyc tape 'test/**/*.js'",
      "test": "npm run tests-only",
      "posttest": "aud --production",
      "version": "auto-changelog && git add CHANGELOG.md",
      "postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
    },
    "env": {},
    "args": {}
  },
  "etag": {
    "description": "Create simple HTTP ETags",
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "function-bind": {
    "description": "Implementation of Function.prototype.bind",
    "scripts": {
      "pretest": "npm run lint",
      "test": "npm run tests-only",
      "posttest": "npm run coverage -- --quiet",
      "tests-only": "node test",
      "coverage": "covert test/*.js",
      "lint": "npm run jscs && npm run eslint",
      "jscs": "jscs *.js */*.js",
      "eslint": "eslint *.js */*.js"
    },
    "env": {},
    "args": {}
  },
  "glob-parent": {
    "description": "Extract the non-magic parent path from a glob string.",
    "scripts": {
      "lint": "eslint .",
      "pretest": "npm run lint",
      "test": "nyc mocha --async-only",
      "azure-pipelines": "nyc mocha --async-only --reporter xunit -O output=test.xunit",
      "coveralls": "nyc report --reporter=text-lcov | coveralls"
    },
    "env": {},
    "args": {}
  },
  "has": {
    "description": "Object.prototype.hasOwnProperty.call shortcut",
    "scripts": {
      "lint": "eslint .",
      "pretest": "npm run lint",
      "test": "tape test"
    },
    "env": {},
    "args": {}
  },
  "has-flag": {
    "description": "Check if argv has a specific flag",
    "scripts": {
      "test": "xo && ava"
    },
    "env": {},
    "args": {}
  },
  "has-symbols": {
    "description": "Determine if the JS environment has Symbol support. Supports spec, or shams.",
    "scripts": {
      "prepublishOnly": "safe-publish-latest",
      "prepublish": "not-in-publish || npm run prepublishOnly",
      "pretest": "npm run --silent lint",
      "test": "npm run tests-only",
      "posttest": "aud --production",
      "tests-only": "npm run test:stock && npm run test:staging && npm run test:shams",
      "test:stock": "nyc node test",
      "test:staging": "nyc node --harmony --es-staging test",
      "test:shams": "npm run --silent test:shams:getownpropertysymbols && npm run --silent test:shams:corejs",
      "test:shams:corejs": "nyc node test/shams/core-js.js",
      "test:shams:getownpropertysymbols": "nyc node test/shams/get-own-property-symbols.js",
      "lint": "eslint --ext=js,mjs .",
      "version": "auto-changelog && git add CHANGELOG.md",
      "postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
    },
    "env": {},
    "args": {}
  },
  "http-errors": {
    "description": "Create HTTP error objects",
    "scripts": {
      "lint": "eslint . && node ./scripts/lint-readme-list.js",
      "test": "mocha --reporter spec --bail",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "version": "node scripts/version-history.js && git add HISTORY.md"
    },
    "env": {},
    "args": {}
  },
  "iconv-lite": {
    "description": "Convert character encodings in pure javascript.",
    "scripts": {
      "coverage": "istanbul cover _mocha -- --grep .",
      "coverage-open": "open coverage/lcov-report/index.html",
      "test": "mocha --reporter spec --grep ."
    },
    "env": {},
    "args": {}
  },
  "ipaddr.js": {
    "description": "A library for manipulating IPv4 and IPv6 addresses in JavaScript.",
    "scripts": {
      "test": "cake build test"
    },
    "env": {},
    "args": {}
  },
  "inherits": {
    "description": "Browser-friendly inheritance fully compatible with standard node.js inherits()",
    "scripts": {
      "test": "tap"
    },
    "env": {},
    "args": {}
  },
  "ignore-by-default": {
    "description": "A list of directories you should ignore by default",
    "scripts": {
      "test": "standard && node test.js"
    },
    "env": {},
    "args": {}
  },
  "is-extglob": {
    "description": "Returns true if a string has an extglob.",
    "scripts": {
      "test": "mocha"
    },
    "env": {},
    "args": {}
  },
  "is-glob": {
    "description": "Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a better user experience.",
    "scripts": {
      "test": "mocha && node benchmark.js"
    },
    "env": {},
    "args": {}
  },
  "fresh": {
    "description": "HTTP response freshness testing",
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "is-binary-path": {
    "description": "Check if a file path is a binary file",
    "scripts": {
      "test": "xo && ava && tsd"
    },
    "env": {},
    "args": {}
  },
  "methods": {
    "description": "HTTP methods that node supports",
    "scripts": {
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "merge-descriptors": {
    "description": "Merge objects using descriptors",
    "scripts": {
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "mime": {
    "description": "A comprehensive library for mime-type mapping",
    "scripts": {
      "mime": "cli.js",
      "prepare": "node src/build.js",
      "changelog": "gren changelog --tags=all --generate --override",
      "test": "node src/test.js"
    },
    "env": {},
    "args": {}
  },
  "mime-db": {
    "description": "Media Type Database",
    "scripts": {
      "build": "node scripts/build",
      "fetch": "node scripts/fetch-apache && gnode scripts/fetch-iana && node scripts/fetch-nginx",
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "update": "npm run fetch && npm run build",
      "version": "node scripts/version-history.js && git add HISTORY.md"
    },
    "env": {},
    "args": {}
  },
  "mime-types": {
    "description": "The ultimate javascript content-type utility.",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec test/test.js",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "media-typer": {
    "description": "Simple RFC 6838 media type parser and formatter",
    "scripts": {
      "test": "mocha --reporter spec --check-leaks --bail test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "ms": {
    "description": "Tiny milisecond conversion utility",
    "scripts": {
      "precommit": "lint-staged",
      "lint": "eslint lib/* bin/*",
      "test": "mocha tests.js"
    },
    "env": {},
    "args": {}
  },
  "negotiator": {
    "description": "HTTP content negotiation",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --check-leaks --bail test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "minimatch": {
    "description": "a glob matcher in javascript",
    "scripts": {
      "test": "tap",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --all; git push origin --tags"
    },
    "env": {},
    "args": {}
  },
  "nopt": {
    "description": "Option parsing for Node, supporting types, shorthands, etc. Used by npm.",
    "scripts": {
      "test": "node lib/nopt.js"
    },
    "env": {},
    "args": {}
  },
  "nodemon": {
    "description": "Simple monitor script for use during development of a Node.js app.",
    "scripts": {
      "nodemon": "./bin/nodemon.js",
      "commitmsg": "commitlint -e",
      "coverage": "istanbul cover _mocha -- --timeout 30000 --ui bdd --reporter list test/**/*.test.js",
      "lint": "eslint lib/**/*.js",
      "test": "npm run lint && npm run spec",
      "spec": "for FILE in test/**/*.test.js; do echo $FILE; TEST=1 mocha --exit --timeout 30000 $FILE; if [ $? -ne 0 ]; then exit 1; fi; sleep 1; done",
      "postspec": "npm run clean",
      "clean": "rm -rf test/fixtures/test*.js test/fixtures/test*.md",
      "web": "node web",
      "semantic-release": "semantic-release",
      "prepush": "npm run lint",
      "killall": "ps auxww | grep node | grep -v grep | awk '{ print $2 }' | xargs kill -9"
    },
    "env": {},
    "args": {}
  },
  "normalize-path": {
    "description": "Normalize slashes in a file path to be posix/unix-like forward slashes. Also condenses repeat slashes to a single slash and removes and trailing slashes, unless disabled.",
    "scripts": {
      "test": "mocha"
    },
    "env": {},
    "args": {}
  },
  "object-assign": {
    "description": "ES2015 `Object.assign()` ponyfill",
    "scripts": {
      "test": "xo && ava",
      "bench": "matcha bench.js"
    },
    "env": {},
    "args": {}
  },
  "openai": {
    "description": "Node.js library for the OpenAI API",
    "scripts": {
      "build": "tsc --outDir dist/"
    },
    "env": {},
    "args": {}
  },
  "object-inspect": {
    "description": "string representations of objects in node and the browser",
    "scripts": {
      "prepack": "npmignore --auto --commentLines=autogenerated",
      "prepublish": "not-in-publish || npm run prepublishOnly",
      "prepublishOnly": "safe-publish-latest",
      "pretest": "npm run lint",
      "lint": "eslint .",
      "test": "npm run tests-only && npm run test:corejs",
      "tests-only": "nyc tape 'test/*.js'",
      "test:corejs": "nyc tape test-core-js.js 'test/*.js'",
      "posttest": "npx aud --production",
      "version": "auto-changelog && git add CHANGELOG.md",
      "postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
    },
    "env": {},
    "args": {}
  },
  "on-finished": {
    "description": "Execute a callback when a request closes, finishes, or errors",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcovonly --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "parseurl": {
    "description": "parse a url with memoization",
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint .",
      "test": "mocha --check-leaks --bail --reporter spec test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec test/"
    },
    "env": {},
    "args": {}
  },
  "picomatch": {
    "description": "Blazing fast and accurate glob matcher written in JavaScript, with no dependencies and full support for standard and extended Bash glob features, including braces, extglobs, POSIX brackets, and regular expressions.",
    "scripts": {
      "lint": "eslint --cache --cache-location node_modules/.cache/.eslintcache --report-unused-disable-directives --ignore-path .gitignore .",
      "mocha": "mocha --reporter dot",
      "test": "npm run lint && npm run mocha",
      "test:ci": "npm run test:cover",
      "test:cover": "nyc npm run mocha"
    },
    "env": {},
    "args": {}
  },
  "path-to-regexp": {
    "description": "Express style path to RegExp utility",
    "scripts": {
      "test": "istanbul cover _mocha -- -R spec"
    },
    "env": {},
    "args": {}
  },
  "proxy-addr": {
    "description": "Determine address of proxied request",
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "pstree.remy": {
    "description": "Collects the full tree of processes from /proc",
    "scripts": {
      "test": "tap tests/*.test.js",
      "_prepublish": "npm test"
    },
    "env": {},
    "args": {}
  },
  "qs": {
    "description": "A querystring parser that supports nesting and arrays, with a depth limit",
    "scripts": {
      "prepack": "npmignore --auto --commentLines=autogenerated",
      "prepublishOnly": "safe-publish-latest && npm run dist",
      "prepublish": "not-in-publish || npm run prepublishOnly",
      "pretest": "npm run --silent readme && npm run --silent lint",
      "test": "npm run tests-only",
      "tests-only": "nyc tape 'test/**/*.js'",
      "posttest": "aud --production",
      "readme": "evalmd README.md",
      "postlint": "eclint check $(git ls-files | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' | grep -v dist/)",
      "lint": "eslint --ext=js,mjs .",
      "dist": "mkdirp dist && browserify --standalone Qs lib/index.js > dist/qs.js"
    },
    "env": {},
    "args": {}
  },
  "range-parser": {
    "description": "Range header field string parser",
    "scripts": {
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "test-travis": "nyc --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "readdirp": {
    "description": "Recursive version of fs.readdir with streaming API.",
    "scripts": {
      "dtslint": "dtslint",
      "nyc": "nyc",
      "mocha": "mocha --exit",
      "lint": "eslint --report-unused-disable-directives --ignore-path .gitignore .",
      "test": "npm run lint && nyc npm run mocha"
    },
    "env": {},
    "args": {}
  },
  "raw-body": {
    "description": "Get and validate the raw body of a readable stream.",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --trace-deprecation --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcovonly --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "safe-buffer": {
    "description": "Safer Node.js Buffer API",
    "scripts": {
      "test": "standard && tape test/*.js"
    },
    "env": {},
    "args": {}
  },
  "is-number": {
    "description": "Returns true if a number or string value is a finite number. Useful for regex matches, parsing, user input, etc.",
    "scripts": {
      "test": "mocha"
    },
    "env": {},
    "args": {}
  },
  "send": {
    "description": "Better streaming static file server with Range and conditional-GET support",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --check-leaks --reporter spec --bail",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "semver": {
    "description": "The semantic version parser used by npm.",
    "scripts": {
      "semver": "./bin/semver",
      "test": "tap",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --all; git push origin --tags"
    },
    "env": {},
    "args": {}
  },
  "serve-static": {
    "description": "Serve static files",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "version": "node scripts/version-history.js && git add HISTORY.md"
    },
    "env": {},
    "args": {}
  },
  "safer-buffer": {
    "description": "Modern Buffer API polyfill without footguns",
    "scripts": {
      "browserify-test": "browserify --external tape tests.js > browserify-tests.js && tape browserify-tests.js",
      "test": "standard && tape tests.js"
    },
    "env": {},
    "args": {}
  },
  "setprototypeof": {
    "description": "A small polyfill for Object.setprototypeof",
    "scripts": {
      "test": "standard && mocha",
      "testallversions": "npm run node010 && npm run node4 && npm run node6 && npm run node9 && npm run node11",
      "testversion": "docker run -it --rm -v $(PWD):/usr/src/app -w /usr/src/app node:${NODE_VER} npm install mocha@${MOCHA_VER:-latest} && npm t",
      "node010": "NODE_VER=0.10 MOCHA_VER=3 npm run testversion",
      "node4": "NODE_VER=4 npm run testversion",
      "node6": "NODE_VER=6 npm run testversion",
      "node9": "NODE_VER=9 npm run testversion",
      "node11": "NODE_VER=11 npm run testversion",
      "prepublishOnly": "npm t",
      "postpublish": "git push origin && git push origin --tags"
    },
    "env": {},
    "args": {}
  },
  "simple-update-notifier": {
    "description": "Simple update notifier to check for npm updates for cli applications",
    "scripts": {
      "test": "jest src --noStackTrace",
      "build": "rollup -c rollup.config.js",
      "prettier:check": "prettier --check src/**/*.ts",
      "prettier": "prettier --write src/**/*.ts",
      "eslint": "eslint src/**/*.ts",
      "lint": "yarn prettier:check && yarn eslint",
      "prepare": "yarn lint && yarn build",
      "release": "release-it"
    },
    "env": {},
    "args": {}
  },
  "side-channel": {
    "description": "Store information about any JS value in a side channel. Uses WeakMap if available.",
    "scripts": {
      "prepublish": "safe-publish-latest",
      "lint": "eslint .",
      "pretest": "npm run lint",
      "tests-only": "nyc tape 'test/**/*.js'",
      "test": "npm run tests-only",
      "posttest": "npx aud --production",
      "version": "auto-changelog && git add CHANGELOG.md",
      "postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
    },
    "env": {},
    "args": {}
  },
  "statuses": {
    "description": "HTTP status utility",
    "scripts": {
      "build": "node scripts/build.js",
      "fetch": "node scripts/fetch-apache.js && node scripts/fetch-iana.js && node scripts/fetch-nginx.js && node scripts/fetch-node.js",
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec --check-leaks --bail test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "update": "npm run fetch && npm run build",
      "version": "node scripts/version-history.js && git add HISTORY.md"
    },
    "env": {},
    "args": {}
  },
  "supports-color": {
    "description": "Detect whether a terminal supports color",
    "scripts": {
      "test": "xo && ava"
    },
    "env": {},
    "args": {}
  },
  "touch": {
    "description": "like touch(1) in node",
    "scripts": {
      "nodetouch": "./bin/nodetouch.js",
      "test": "tap test/*.js --100 -J",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --all; git push origin --tags"
    },
    "env": {},
    "args": {}
  },
  "toidentifier": {
    "description": "Convert a string of words to a JavaScript identifier",
    "scripts": {
      "lint": "eslint .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-ci": "nyc --reporter=lcov --reporter=text npm test",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "version": "node scripts/version-history.js && git add HISTORY.md"
    },
    "env": {},
    "args": {}
  },
  "type-is": {
    "description": "Infer the content-type of a request.",
    "scripts": {
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec --check-leaks --bail test/",
      "test-cov": "nyc --reporter=html --reporter=text npm test",
      "test-travis": "nyc --reporter=text npm test"
    },
    "env": {},
    "args": {}
  },
  "undefsafe": {
    "description": "Undefined safe way of extracting object properties",
    "scripts": {
      "test": "tap test/**/*.test.js -R spec",
      "cover": "tap test/*.test.js --cov --coverage-report=lcov",
      "semantic-release": "semantic-release"
    },
    "env": {},
    "args": {}
  },
  "utils-merge": {
    "description": "merge() utility function",
    "scripts": {
      "test": "node_modules/.bin/mocha --reporter spec --require test/bootstrap/node test/*.test.js"
    },
    "env": {},
    "args": {}
  },
  "vary": {
    "description": "Manipulate the HTTP Vary header",
    "scripts": {
      "bench": "node benchmark/index.js",
      "lint": "eslint --plugin markdown --ext js,md .",
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "env": {},
    "args": {}
  },
  "to-regex-range": {
    "description": "Pass two numbers, get a regex-compatible source string for matching ranges. Validated against more than 2.78 million test assertions.",
    "scripts": {
      "test": "mocha"
    },
    "env": {},
    "args": {}
  },
  "unpipe": {
    "description": "Unpipe a stream from all destinations",
    "scripts": {
      "test": "mocha --reporter spec --bail --check-leaks test/",
      "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
      "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/"
    },
    "env": {},
    "args": {}
  }
}